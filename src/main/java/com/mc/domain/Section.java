package com.mc.domain;
// Generated 2015-9-15 12:29:23 by Hibernate Tools 4.0.0

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Section generated by hbm2java
 */
@Entity
@Table(name = "section", catalog = "micro_course")
public class Section implements java.io.Serializable {

	private Long sectionId;
	private Chapter chapter;
	private String name;
	private String description;
	private String videoPath;
	private Integer duration;
	private int type;
	private Date uploadTime;
	private int playCount;
	private int experience;
	private Set<Question> questions = new HashSet<Question>(0);
	private Set<Note> notes = new HashSet<Note>(0);
	private Set<Material> materials = new HashSet<Material>(0);
	private Practice practice;
	private Exercise exercise;
	private Set<Comment> comments = new HashSet<Comment>(0);
	private Set<UserSection> userSections=new HashSet<UserSection>(0);

	public Section() {
	}

	public Section(Chapter chapter, int type, int playCount, int experience) {
		this.chapter = chapter;
		this.type = type;
		this.playCount = playCount;
		this.experience = experience;
	}

	public Section(Chapter chapter, String name, String videoPath, Integer duration, int type, Date uploadTime,
			int playCount, int experience,  Set<Question> questions, Set<Note> notes, Set<Material> materials,
			Set<Comment> comments) {
		this.chapter = chapter;
		this.name = name;
		this.videoPath = videoPath;
		this.duration = duration;
		this.type = type;
		this.uploadTime = uploadTime;
		this.playCount = playCount;
		this.experience = experience;
		this.questions = questions;
		this.notes = notes;
		this.materials = materials;
		this.comments = comments;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "section_id", unique = true, nullable = false)
	public Long getSectionId() {
		return this.sectionId;
	}

	public void setSectionId(Long sectionId) {
		this.sectionId = sectionId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "chapter_id", nullable = false)
	public Chapter getChapter() {
		return this.chapter;
	}

	public void setChapter(Chapter chapter) {
		this.chapter = chapter;
	}

	@Column(name = "name", length = 20)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "video_path", length = 20)
	public String getVideoPath() {
		return this.videoPath;
	}

	public void setVideoPath(String videoPath) {
		this.videoPath = videoPath;
	}

	@Column(name = "duration")
	public Integer getDuration() {
		return this.duration;
	}

	public void setDuration(Integer duration) {
		this.duration = duration;
	}

	@Column(name = "type", nullable = false)
	public int getType() {
		return this.type;
	}

	public void setType(int type) {
		this.type = type;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "upload_time", length = 19)
	public Date getUploadTime() {
		return this.uploadTime;
	}

	public void setUploadTime(Date uploadTime) {
		this.uploadTime = uploadTime;
	}

	@Column(name = "play_count", nullable = false)
	public int getPlayCount() {
		return this.playCount;
	}

	public void setPlayCount(int playCount) {
		this.playCount = playCount;
	}

	@Column(name = "experience", nullable = false)
	public int getExperience() {
		return this.experience;
	}

	public void setExperience(int experience) {
		this.experience = experience;
	}


	@OneToMany(fetch = FetchType.LAZY, mappedBy = "section")
	public Set<Question> getQuestions() {
		return this.questions;
	}

	public void setQuestions(Set<Question> questions) {
		this.questions = questions;
	}
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "section")
	public Set<Note> getNotes() {
		return this.notes;
	}

	public void setNotes(Set<Note> notes) {
		this.notes = notes;
	}
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "section")
	public Set<Material> getMaterials() {
		return this.materials;
	}

	public void setMaterials(Set<Material> materials) {
		this.materials = materials;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "section")
	public Set<Comment> getComments() {
		return this.comments;
	}

	public void setComments(Set<Comment> comments) {
		this.comments = comments;
	}
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "section")
	public Set<UserSection> getUserSections() {
		return userSections;
	}

	public void setUserSections(Set<UserSection> userSections) {
		this.userSections = userSections;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}
	@OneToOne(fetch = FetchType.LAZY, mappedBy = "section")
	public Practice getPractice() {
		return practice;
	}

	public void setPractice(Practice practice) {
		this.practice = practice;
	}
	@OneToOne(fetch = FetchType.LAZY, mappedBy = "section")
	public Exercise getExercise() {
		return exercise;
	}

	public void setExercise(Exercise exercise) {
		this.exercise = exercise;
	}
}
