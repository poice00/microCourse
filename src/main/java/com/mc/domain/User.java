package com.mc.domain;
// Generated 2015-9-15 12:29:23 by Hibernate Tools 4.0.0

import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.servlet.ServletContext;

import org.springframework.web.context.ContextLoader;
import org.springframework.web.context.WebApplicationContext;



/**
 * User generated by hbm2java
 */
@Entity
@Table(name = "user", catalog = "micro_course")
public class User implements java.io.Serializable {

	private Long userId;
	private Title title;
	private String nickname;
	private String password;
	private String avatar;
	private Date registTime;
	private Date birthday;
	private String email;
	private int gender;
	private String introduction;
	private String loginName;
	private String learnedTime;
	private int experience;
	private int applyTutor;
	private String inspectResult;
	
	private Role role ;
	private Set<Log> logs = new HashSet<Log>();
	private Set<SearchHistory> historys = new HashSet<SearchHistory>();
	private Set<SearchContent> searchContents  = new HashSet<SearchContent>();
	
	private Set<UserCourse> userCourses = new HashSet<UserCourse>(0);
	private Set<Experience> experiences = new HashSet<Experience>(0);
	private Set<Article> articles = new HashSet<Article>(0);
	private Set<Opus> opuses = new HashSet<Opus>(0);
	private Settings settings;
	private Set<UserPlan> userPlans = new HashSet<UserPlan>(0);
	private Set<Verify> verifies = new HashSet<Verify>(0);
	private Set<StudyProgress> studyProgresses = new HashSet<StudyProgress>(0);
	private Set<Question> questions = new HashSet<Question>(0);
	private Set<Topic> topics = new HashSet<Topic>(0);
	private Set<Reply> replies = new HashSet<Reply>(0);
	private Set<Course> courses = new HashSet<Course>(0);
	private Set<Comment> comments = new HashSet<Comment>(0);
	private Set<Note> notes = new HashSet<Note>(0);
	private Set<UserSection> userSections=new HashSet<UserSection>(0);
	private Set<StudyStatus> studyStatus=new HashSet<StudyStatus>(0);
	public User() {
	}

	public User(Role role, String nickname, String password, Date registTime, int gender, String loginName,
			int experience) {
		this.role = role;
		this.nickname = nickname;
		this.password = password;
		this.registTime = registTime;
		this.gender = gender;
		this.loginName = loginName;
		this.experience = experience;
	}

	public User(Title title, Role role, String nickname, String password, String avatar, Date registTime, Date birthday,
			String email, int gender, String introduction, String loginName, String learnedTime, int experience,
			Set<UserCourse> userCourses, Set<Experience> experiences, Set<Article> articles, Set<Opus> opuses,
			Set<Log> logs, Settings settings, Set<UserPlan> userPlans, Set<Verify> verifies,
			Set<StudyProgress> studyProgresses, Set<Question> questions, Set<Topic> topics, Set<Reply> replies,
			Set<Course> courses, Set<Comment> comments) {
		this.title = title;
		this.role = role;
		this.nickname = nickname;
		this.password = password;
		this.avatar = avatar;
		this.registTime = registTime;
		this.birthday = birthday;
		this.email = email;
		this.gender = gender;
		this.introduction = introduction;
		this.loginName = loginName;
		this.learnedTime = learnedTime;
		this.experience = experience;
		this.userCourses = userCourses;
		this.experiences = experiences;
		this.articles = articles;
		this.opuses = opuses;
		this.logs = logs;
		this.settings = settings;
		this.userPlans = userPlans;
		this.verifies = verifies;
		this.studyProgresses = studyProgresses;
		this.questions = questions;
		this.topics = topics;
		this.replies = replies;
		this.courses = courses;
		this.comments = comments;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "user_id", unique = true, nullable = false)
	public Long getUserId() {
		return this.userId;
	}

	public void setUserId(Long userId) {
		this.userId = userId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "title_id")
	public Title getTitle() {
		return this.title;
	}

	public void setTitle(Title title) {
		this.title = title;
	}
	@ManyToOne
	@JoinColumn(name="roleId")
	public Role getRole() {
		return this.role;
	}

	public void setRole(Role role) {
		this.role = role;
	}

	@Column(name = "nickname", nullable = false, length = 20)
	public String getNickname() {
		return this.nickname;
	}

	public void setNickname(String nickname) {
		this.nickname = nickname;
	}

	@Column(name = "password", nullable = false, length = 20)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "avatar", length = 20)
	public String getAvatar() {
		return this.avatar;
	}

	public void setAvatar(String avatar) {
		this.avatar = avatar;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "regist_time", nullable = false, length = 10)
	public Date getRegistTime() {
		return this.registTime;
	}

	public void setRegistTime(Date registTime) {
		this.registTime = registTime;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "birthday", length = 10)
	public Date getBirthday() {
		return this.birthday;
	}

	public void setBirthday(Date birthday) {
		this.birthday = birthday;
	}

	@Column(name = "email", length = 20)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "gender", nullable = false)
	public int getGender() {
		return this.gender;
	}

	public void setGender(int gender) {
		this.gender = gender;
	}

	@Column(name = "introduction", length = 16777215)
	public String getIntroduction() {
		return this.introduction;
	}

	public void setIntroduction(String introduction) {
		this.introduction = introduction;
	}

	@Column(name = "login_name", nullable = false, length = 20)
	public String getLoginName() {
		return this.loginName;
	}

	public void setLoginName(String loginName) {
		this.loginName = loginName;
	}

	@Column(name = "learned_time", length = 20)
	public String getLearnedTime() {
		return this.learnedTime;
	}

	public void setLearnedTime(String learnedTime) {
		this.learnedTime = learnedTime;
	}

	@Column(name = "experience", nullable = false)
	public int getExperience() {
		return this.experience;
	}

	public void setExperience(int experience) {
		this.experience = experience;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<UserCourse> getUserCourses() {
		return this.userCourses;
	}

	public void setUserCourses(Set<UserCourse> userCourses) {
		this.userCourses = userCourses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Experience> getExperiences() {
		return this.experiences;
	}

	public void setExperiences(Set<Experience> experiences) {
		this.experiences = experiences;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Article> getArticles() {
		return this.articles;
	}

	public void setArticles(Set<Article> articles) {
		this.articles = articles;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Opus> getOpuses() {
		return this.opuses;
	}

	public void setOpuses(Set<Opus> opuses) {
		this.opuses = opuses;
	}

	@OneToMany(mappedBy="createBy",cascade=CascadeType.REMOVE)
	public Set<Log> getLogs() {
		return this.logs;
	}

	public void setLogs(Set<Log> logs) {
		this.logs = logs;
	}
	
	@OneToOne(fetch = FetchType.LAZY, mappedBy = "user")
	public Settings getSettings() {
		return this.settings;
	}

	public void setSettings(Settings settings) {
		this.settings = settings;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<UserPlan> getUserPlans() {
		return this.userPlans;
	}

	public void setUserPlans(Set<UserPlan> userPlans) {
		this.userPlans = userPlans;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Verify> getVerifies() {
		return this.verifies;
	}

	public void setVerifies(Set<Verify> verifies) {
		this.verifies = verifies;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<StudyProgress> getStudyProgresses() {
		return this.studyProgresses;
	}

	public void setStudyProgresses(Set<StudyProgress> studyProgresses) {
		this.studyProgresses = studyProgresses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Question> getQuestions() {
		return this.questions;
	}

	public void setQuestions(Set<Question> questions) {
		this.questions = questions;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Topic> getTopics() {
		return this.topics;
	}

	public void setTopics(Set<Topic> topics) {
		this.topics = topics;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Reply> getReplies() {
		return this.replies;
	}

	public void setReplies(Set<Reply> replies) {
		this.replies = replies;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Course> getCourses() {
		return this.courses;
	}

	public void setCourses(Set<Course> courses) {
		this.courses = courses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Comment> getComments() {
		return this.comments;
	}

	public void setComments(Set<Comment> comments) {
		this.comments = comments;
	}
	

	/**
	 * 判断本用户是否有指定url的权限
	 * 防止已登录用户输入url进行访问
	 * @return
	 */
	@Transient
	public boolean hasPrivilegeByUrl(String priUrl) {
			//超级管理员
				if(isAdmin()){
					return true;
				}
				// >>去掉后面的参数
		    	int pos = priUrl.indexOf("?");
		    	if(pos > -1){
		    		priUrl = priUrl.substring(0, pos);
		    	}
		    	// >>去掉后面的UI
		    	if(priUrl.endsWith("UI")){
		    		priUrl = priUrl.substring(0, priUrl.length()-2);
		    	}
		    	WebApplicationContext webApplicationContext = ContextLoader.getCurrentWebApplicationContext();  
		        ServletContext servletContext = webApplicationContext.getServletContext();  
		    	Collection<String> allPrivilegeUrls = (Collection<String>) servletContext.getAttribute("allPrivilegeUrls");
				//如果URL不需要控制，则登陆用户可以使用
				if(!allPrivilegeUrls.contains(priUrl)){
					return true;
				}else{
			    	//普通用户
						for(Privilege priv:role.getPrivilege()){
							if(priUrl.equals(priv.getUrl())){
								return true;
							}
				}
				
				return false;
				}
	}
	/**
	 * 判断是否为超级管理员
	 * @return
	 */
	@Transient
	public  boolean isAdmin(){
		return "admin".equals(loginName);
	}

	public int getApplyTutor() {
		return applyTutor;
	}

	public void setApplyTutor(int applyTutor) {
		this.applyTutor = applyTutor;
	}
	@OneToMany(mappedBy="user",cascade=CascadeType.REMOVE)
	public Set<SearchContent> getSearchContents() {
		return searchContents;
	}

	public void setSearchContents(Set<SearchContent> searchContents) {
		this.searchContents = searchContents;
	}
	@OneToMany(mappedBy="user",cascade=CascadeType.REMOVE)
	public Set<Note> getNotes() {
		return notes;
	}

	public void setNotes(Set<Note> notes) {
		this.notes = notes;
	}
	@OneToMany(mappedBy="user",cascade=CascadeType.REMOVE)
	public Set<UserSection> getUserSections() {
		return userSections;
	}

	public void setUserSections(Set<UserSection> userSections) {
		this.userSections = userSections;
	}

	@OneToMany(mappedBy="user",cascade=CascadeType.REMOVE)
	public Set<StudyStatus> getStudyStatus() {
		return studyStatus;
	}	
	public void setStudyStatus(Set<StudyStatus> studyStatus) {
		this.studyStatus = studyStatus;
	}
	
	@OneToMany(mappedBy="user",cascade=CascadeType.REMOVE)
	public Set<SearchHistory> getHistorys() {
		return historys;
	}
	public void setHistorys(Set<SearchHistory> historys) {
		this.historys = historys;
	}

	public String getInspectResult() {
		return inspectResult;
	}

	public void setInspectResult(String inspectResult) {
		this.inspectResult = inspectResult;
	}

}
