package com.mc.domain;
// Generated 2015-9-15 12:29:23 by Hibernate Tools 4.0.0

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * Question generated by hbm2java
 */
@Entity
@Table(name = "question", catalog = "micro_course")
public class Question implements java.io.Serializable {

	private Long questionId;
	private User user;
	private Section section;
	private String title;
	private String content;
	private Date postTime;
	private String type;
	private int answerCount;
	private int readCount;
	private String screenshort;
	private Set<Reply> replies = new HashSet<Reply>(0);

	public Question() {
	}

	public Question(int answerCount, int readCount) {
		this.answerCount = answerCount;
		this.readCount = readCount;
	}

	public Question(User user, Section section, String title, String content, Date postTime, String type,
			int answerCount, int readCount, String screenshort, Set<Reply> replies) {
		this.user = user;
		this.section = section;
		this.title = title;
		this.content = content;
		this.postTime = postTime;
		this.type = type;
		this.answerCount = answerCount;
		this.readCount = readCount;
		this.screenshort = screenshort;
		this.replies = replies;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "question_id", unique = true, nullable = false)
	public Long getQuestionId() {
		return this.questionId;
	}

	public void setQuestionId(Long questionId) {
		this.questionId = questionId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "user_id")
	public User getUser() {
		return this.user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "section_id")
	public Section getSection() {
		return this.section;
	}

	public void setSection(Section section) {
		this.section = section;
	}

	@Column(name = "title", length = 20)
	public String getTitle() {
		return this.title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	@Column(name = "content", length = 18)
	public String getContent() {
		return this.content;
	}

	public void setContent(String content) {
		this.content = content;
	}

	@Column(name = "post_time", length = 18)
	public Date getPostTime() {
		return this.postTime;
	}

	public void setPostTime(Date postTime) {
		this.postTime = postTime;
	}

	@Column(name = "type", length = 18)
	public String getType() {
		return this.type;
	}

	public void setType(String type) {
		this.type = type;
	}

	@Column(name = "answer_count", nullable = false)
	public int getAnswerCount() {
		return this.answerCount;
	}

	public void setAnswerCount(int answerCount) {
		this.answerCount = answerCount;
	}

	@Column(name = "read_count", nullable = false)
	public int getReadCount() {
		return this.readCount;
	}

	public void setReadCount(int readCount) {
		this.readCount = readCount;
	}

	@Column(name = "screenshort", length = 18)
	public String getScreenshort() {
		return this.screenshort;
	}

	public void setScreenshort(String screenshort) {
		this.screenshort = screenshort;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "question")
	public Set<Reply> getReplies() {
		return this.replies;
	}

	public void setReplies(Set<Reply> replies) {
		this.replies = replies;
	}

}
